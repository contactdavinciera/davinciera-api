// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  bio       String?
  avatarUrl String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  enrollments     Enrollment[]
  instructedCourses Course[] @relation("InstructorCourses")
  affiliateCode   String?  @unique
  
  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String
  price       Float
  originalPrice Float?
  thumbnailUrl String?
  previewVideoUrl String?
  level       String
  duration    String
  rating      Float    @default(0)
  studentCount Int     @default(0)
  language    String   @default("English")
  
  // Instructor relation
  instructorId String
  instructor   User     @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  
  // Category relation
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  
  // Course content (stored as JSON strings for SQLite compatibility)
  learningOutcomes Json // JSON array
  requirements     Json // JSON array
  tags            Json // JSON array
  
  // Course structure
  modules         CourseModule[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastUpdated DateTime @default(now())
  
  // Relations
  enrollments Enrollment[]
  
  @@map("courses")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  icon        String
  description String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courses Course[]
  
  @@map("categories")
}

model CourseModule {
  id       String @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Module content
  lessons  Lesson[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("course_modules")
}

model Lesson {
  id       String @id @default(cuid())
  title    String
  content  String?
  videoUrl String?
  duration Int?    // Duration in seconds
  order    Int
  
  // Module relation
  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lessons")
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String
  courseId   String
  status     EnrollmentStatus @default(ACTIVE)
  progress   Float            @default(0) // Progress percentage (0-100)
  
  // Payment information
  paymentStatus PaymentStatus @default(PENDING)
  paymentAmount Float?
  paymentDate   DateTime?
  stripeCheckoutSessionId String? @unique
  stripePaymentIntentId   String? @unique
  
  // Affiliate tracking
  affiliateCode String?
  
  // Timestamps
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  updatedAt  DateTime @updatedAt
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
  @@map("enrollments")
}

// Enums
enum UserRole {
  STUDENT
  INSTRUCTOR
  AFFILIATE
  ADMIN
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
